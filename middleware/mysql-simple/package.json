{
  "name": "mysql-simple",
  "description": "Provides connection pooling and a simplified interface on top of node-mysql and generic-pool.",
  "version": "1.0.3",
  "author": {
    "name": "John Hurliman",
    "email": "jhurliman@cull.tv"
  },
  "contributors": [
    {
      "name": "Roman Kamyk",
      "email": "rkj@go2.pl",
      "url": "http://rkj.github.com/"
    }
  ],
  "dependencies": {
    "mysql": "0.9.2",
    "generic-pool": "1.0.6"
  },
  "keywords": [
    "mysql",
    "database",
    "pooling",
    "native"
  ],
  "directories": {
    "lib": "./lib"
  },
  "main": "index",
  "engines": {
    "node": "*"
  },
  "readme": "# node-mysql-simple #\n\nProvides connection pooling and a simplified interface on top of node-mysql and \ngeneric-pool. The goal is to abstract away the details of MySQL connection \nhandling and provide single-method interfaces to the database.\n\n## Installation ##\n\nUse NPM to install:\n\n    npm install node-mysql-simple\n\n## Usage ##\n\n    var database = require('mysql-simple');\n    // Port number is optional\n    database.init('username', 'password', 'mydatabase', 'localhost', 3306);\n    \n    database.query('SELECT * FROM users WHERE active=? LIMIT 10', [true],\n      function(err, results)\n    {\n      if (err) {\n        console.log('error fetching some active users: ' + err);\n        return;\n      }\n      \n      for (var i = 0; i < results.length; i++)\n        console.log('got active user ' + results[i]);\n    });\n    \n    database.querySingle('SELECT id,name FROM users WHERE id=?', [42],\n      function(err, result)\n    {\n      if (err) {\n        console.log('error fetching a single active user: ' + err);\n        return;\n      }\n      \n      if (result)\n        console.log('user exists!');\n      else\n        console.log('user does not exist');\n    });\n    \n    database.queryMany('SELECT * FROM users WHERE active=?', [true],\n      function(row) // Row callback\n    {\n      console.log('got active user ' + row);\n    },\n      function(err) // End callback\n    {\n      if (err) {\n        console.log('error fetching all active users: ' + err);\n        return;\n      }\n    });\n    \n    database.nonQuery('INSERT INTO users (name, email) VALUES (?, ?)',\n      ['newuser', 'newuser@gmail.com'], function(err, info)\n    {\n      if (err) {\n        console.log('error inserting new user: ' + err);\n        return;\n      }\n      \n      console.log('inserted new user, id = ' + info.insertId);\n    });\n\n## Sponsors ##\n\n* [cull.tv](http://cull.tv/) - New music television\n\n## License ##\n\n(The MIT License)\n\nCopyright (c) 2011 Cull TV, Inc. &lt;jhurliman@cull.tv&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "mysql-simple@1.0.3",
  "_from": "mysql-simple@*"
}
